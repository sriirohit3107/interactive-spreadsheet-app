{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUNYLoaner\\\\Desktop\\\\interactive-spreadsheet-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cells, setCells] = useState([]);\n  const [editing, setEditing] = useState({\n    row: null,\n    col: null,\n    value: ''\n  });\n  const [currentSheet, setCurrentSheet] = useState(0); // Keep track of current worksheet\n  const [history, setHistory] = useState([]);\n  const [currentHistoryIndex, setCurrentHistoryIndex] = useState(-1);\n  const totalRows = 1000; // Maximum rows (1 to 1000)\n  const totalCols = 26; // Columns A to Z\n\n  // Fetch cells for the current sheet\n  useEffect(() => {\n    const fetchCells = async () => {\n      const response = await fetch(`http://localhost:5000/cells?sheet=${currentSheet}`);\n      if (response.ok) {\n        const data = await response.json();\n        setCells(data);\n      } else {\n        console.error('Failed to fetch cells');\n      }\n    };\n    fetchCells();\n  }, [currentSheet]);\n\n  // Handle cell value change\n  const handleCellChange = (e, row, col) => {\n    setEditing({\n      row,\n      col,\n      value: e.target.value\n    });\n  };\n\n  // Save cell value to the backend\n  const handleCellSave = async (row, col) => {\n    const {\n      value\n    } = editing;\n    if (!value) return;\n    const response = await fetch('http://localhost:5000/cells', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        row,\n        col,\n        value,\n        sheet: currentSheet\n      })\n    });\n    if (response.ok) {\n      const updatedCell = await response.json();\n      setCells(prevCells => {\n        const updatedCells = prevCells.map(cell => {\n          if (cell.row === updatedCell.row && cell.col === updatedCell.col) {\n            return updatedCell;\n          }\n          return cell;\n        });\n        if (!prevCells.find(cell => cell.row === updatedCell.row && cell.col === updatedCell.col)) {\n          updatedCells.push(updatedCell);\n        }\n        return updatedCells;\n      });\n      addToHistory(updatedCell);\n      setEditing({\n        row: null,\n        col: null,\n        value: ''\n      });\n    } else {\n      console.error('Failed to save cell');\n    }\n  };\n\n  // Add the current state of cells to history (for undo/redo)\n  const addToHistory = updatedCell => {\n    const newHistory = [...history.slice(0, currentHistoryIndex + 1), [...cells]];\n    setHistory(newHistory);\n    setCurrentHistoryIndex(newHistory.length - 1);\n  };\n\n  // Handle Undo functionality\n  const handleUndo = () => {\n    if (currentHistoryIndex > 0) {\n      const previousCells = history[currentHistoryIndex - 1];\n      setCells(previousCells);\n      setCurrentHistoryIndex(currentHistoryIndex - 1);\n    }\n  };\n\n  // Handle Redo functionality\n  const handleRedo = () => {\n    if (currentHistoryIndex < history.length - 1) {\n      const nextCells = history[currentHistoryIndex + 1];\n      setCells(nextCells);\n      setCurrentHistoryIndex(currentHistoryIndex + 1);\n    }\n  };\n\n  // Handle switching between worksheets\n  const handleSheetSwitch = sheetIndex => {\n    setCurrentSheet(sheetIndex);\n  };\n\n  // Render the grid dynamically based on rows and columns\n  const renderGrid = () => {\n    const grid = [];\n    for (let row = 1; row <= totalRows; row++) {\n      const cellsInRow = [];\n      for (let col = 0; col < totalCols; col++) {\n        const colLetter = String.fromCharCode(65 + col); // A to Z\n        const cell = cells.find(cell => cell.row === row && cell.col === colLetter);\n        cellsInRow.push(/*#__PURE__*/_jsxDEV(\"td\", {\n          onClick: () => setEditing({\n            row,\n            col: colLetter,\n            value: cell ? cell.value : ''\n          }),\n          className: \"cell\",\n          style: {\n            border: '1px solid #ccc',\n            textAlign: 'center',\n            backgroundColor: (row + col) % 2 === 0 ? '#f4f4f4' : '#fff'\n          },\n          children: editing.row === row && editing.col === colLetter ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editing.value,\n            onChange: e => handleCellChange(e, row, colLetter),\n            onBlur: () => handleCellSave(row, colLetter),\n            autoFocus: true,\n            className: \"cell-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: cell ? cell.value : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this));\n      }\n      grid.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: cellsInRow\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this));\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spreadsheet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Spreadsheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spreadsheet-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUndo,\n        disabled: currentHistoryIndex === 0,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRedo,\n        disabled: currentHistoryIndex === history.length - 1,\n        children: \"Redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spreadsheet-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSheetSwitch(0),\n        className: currentSheet === 0 ? 'active' : '',\n        children: \"Sheet 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSheetSwitch(1),\n        className: currentSheet === 1 ? 'active' : '',\n        children: \"Sheet 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSheetSwitch(2),\n        className: currentSheet === 2 ? 'active' : '',\n        children: \"Sheet 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"spreadsheet\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), [...Array(totalCols)].map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: String.fromCharCode(65 + colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Dof5HVfM3EizGfznPtfpzOfcpIM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","gsap","jsxDEV","_jsxDEV","App","_s","cells","setCells","editing","setEditing","row","col","value","currentSheet","setCurrentSheet","history","setHistory","currentHistoryIndex","setCurrentHistoryIndex","totalRows","totalCols","fetchCells","response","fetch","ok","data","json","console","error","handleCellChange","e","target","handleCellSave","method","headers","body","JSON","stringify","sheet","updatedCell","prevCells","updatedCells","map","cell","find","push","addToHistory","newHistory","slice","length","handleUndo","previousCells","handleRedo","nextCells","handleSheetSwitch","sheetIndex","renderGrid","grid","cellsInRow","colLetter","String","fromCharCode","onClick","className","style","border","textAlign","backgroundColor","children","type","onChange","onBlur","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","disabled","Array","_","colIndex","_c","$RefreshReg$"],"sources":["C:/Users/SUNYLoaner/Desktop/interactive-spreadsheet-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { gsap } from 'gsap';\r\n\r\nconst App = () => {\r\n  const [cells, setCells] = useState([]);\r\n  const [editing, setEditing] = useState({ row: null, col: null, value: '' });\r\n  const [currentSheet, setCurrentSheet] = useState(0); // Keep track of current worksheet\r\n  const [history, setHistory] = useState([]);\r\n  const [currentHistoryIndex, setCurrentHistoryIndex] = useState(-1);\r\n  \r\n  const totalRows = 1000;  // Maximum rows (1 to 1000)\r\n  const totalCols = 26;    // Columns A to Z\r\n\r\n  // Fetch cells for the current sheet\r\n  useEffect(() => {\r\n    const fetchCells = async () => {\r\n      const response = await fetch(`http://localhost:5000/cells?sheet=${currentSheet}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setCells(data);\r\n      } else {\r\n        console.error('Failed to fetch cells');\r\n      }\r\n    };\r\n    fetchCells();\r\n  }, [currentSheet]);\r\n\r\n  // Handle cell value change\r\n  const handleCellChange = (e, row, col) => {\r\n    setEditing({ row, col, value: e.target.value });\r\n  };\r\n\r\n  // Save cell value to the backend\r\n  const handleCellSave = async (row, col) => {\r\n    const { value } = editing;\r\n    if (!value) return;\r\n\r\n    const response = await fetch('http://localhost:5000/cells', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ row, col, value, sheet: currentSheet }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const updatedCell = await response.json();\r\n      setCells((prevCells) => {\r\n        const updatedCells = prevCells.map((cell) => {\r\n          if (cell.row === updatedCell.row && cell.col === updatedCell.col) {\r\n            return updatedCell;\r\n          }\r\n          return cell;\r\n        });\r\n\r\n        if (!prevCells.find((cell) => cell.row === updatedCell.row && cell.col === updatedCell.col)) {\r\n          updatedCells.push(updatedCell);\r\n        }\r\n\r\n        return updatedCells;\r\n      });\r\n\r\n      addToHistory(updatedCell);\r\n      setEditing({ row: null, col: null, value: '' });\r\n    } else {\r\n      console.error('Failed to save cell');\r\n    }\r\n  };\r\n\r\n  // Add the current state of cells to history (for undo/redo)\r\n  const addToHistory = (updatedCell) => {\r\n    const newHistory = [...history.slice(0, currentHistoryIndex + 1), [...cells]];\r\n    setHistory(newHistory);\r\n    setCurrentHistoryIndex(newHistory.length - 1);\r\n  };\r\n\r\n  // Handle Undo functionality\r\n  const handleUndo = () => {\r\n    if (currentHistoryIndex > 0) {\r\n      const previousCells = history[currentHistoryIndex - 1];\r\n      setCells(previousCells);\r\n      setCurrentHistoryIndex(currentHistoryIndex - 1);\r\n    }\r\n  };\r\n\r\n  // Handle Redo functionality\r\n  const handleRedo = () => {\r\n    if (currentHistoryIndex < history.length - 1) {\r\n      const nextCells = history[currentHistoryIndex + 1];\r\n      setCells(nextCells);\r\n      setCurrentHistoryIndex(currentHistoryIndex + 1);\r\n    }\r\n  };\r\n\r\n  // Handle switching between worksheets\r\n  const handleSheetSwitch = (sheetIndex) => {\r\n    setCurrentSheet(sheetIndex);\r\n  };\r\n\r\n  // Render the grid dynamically based on rows and columns\r\n  const renderGrid = () => {\r\n    const grid = [];\r\n    for (let row = 1; row <= totalRows; row++) {\r\n      const cellsInRow = [];\r\n      for (let col = 0; col < totalCols; col++) {\r\n        const colLetter = String.fromCharCode(65 + col); // A to Z\r\n        const cell = cells.find((cell) => cell.row === row && cell.col === colLetter);\r\n        cellsInRow.push(\r\n          <td\r\n            key={`${row}-${col}`}\r\n            onClick={() => setEditing({ row, col: colLetter, value: cell ? cell.value : '' })}\r\n            className=\"cell\"\r\n            style={{\r\n              border: '1px solid #ccc',\r\n              textAlign: 'center',\r\n              backgroundColor: (row + col) % 2 === 0 ? '#f4f4f4' : '#fff',\r\n            }}\r\n          >\r\n            {editing.row === row && editing.col === colLetter ? (\r\n              <input\r\n                type=\"text\"\r\n                value={editing.value}\r\n                onChange={(e) => handleCellChange(e, row, colLetter)}\r\n                onBlur={() => handleCellSave(row, colLetter)}\r\n                autoFocus\r\n                className=\"cell-input\"\r\n              />\r\n            ) : (\r\n              <span>{cell ? cell.value : ''}</span>\r\n            )}\r\n          </td>\r\n        );\r\n      }\r\n      grid.push(<tr key={row}>{cellsInRow}</tr>);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  return (\r\n    <div className=\"spreadsheet-container\">\r\n      <h1>Interactive Spreadsheet</h1>\r\n\r\n      {/* Buttons for Undo/Redo */}\r\n      <div className=\"spreadsheet-actions\">\r\n        <button onClick={handleUndo} disabled={currentHistoryIndex === 0}>Undo</button>\r\n        <button onClick={handleRedo} disabled={currentHistoryIndex === history.length - 1}>Redo</button>\r\n      </div>\r\n\r\n      {/* Buttons for Worksheet Switching */}\r\n      <div className=\"spreadsheet-tabs\">\r\n        <button onClick={() => handleSheetSwitch(0)} className={currentSheet === 0 ? 'active' : ''}>Sheet 1</button>\r\n        <button onClick={() => handleSheetSwitch(1)} className={currentSheet === 1 ? 'active' : ''}>Sheet 2</button>\r\n        <button onClick={() => handleSheetSwitch(2)} className={currentSheet === 2 ? 'active' : ''}>Sheet 3</button>\r\n      </div>\r\n\r\n      {/* Table to display grid */}\r\n      <table className=\"spreadsheet\">\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            {[...Array(totalCols)].map((_, colIndex) => (\r\n              <th key={colIndex}>{String.fromCharCode(65 + colIndex)}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{renderGrid()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,IAAI,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC;IAAEW,GAAG,EAAE,IAAI;IAAEC,GAAG,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EAC3E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElE,MAAMoB,SAAS,GAAG,IAAI,CAAC,CAAE;EACzB,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAI;;EAEzB;EACApB,SAAS,CAAC,MAAM;IACd,MAAMqB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqCV,YAAY,EAAE,CAAC;MACjF,IAAIS,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCnB,QAAQ,CAACkB,IAAI,CAAC;MAChB,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MACxC;IACF,CAAC;IACDP,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACR,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMgB,gBAAgB,GAAGA,CAACC,CAAC,EAAEpB,GAAG,EAAEC,GAAG,KAAK;IACxCF,UAAU,CAAC;MAAEC,GAAG;MAAEC,GAAG;MAAEC,KAAK,EAAEkB,CAAC,CAACC,MAAM,CAACnB;IAAM,CAAC,CAAC;EACjD,CAAC;;EAED;EACA,MAAMoB,cAAc,GAAG,MAAAA,CAAOtB,GAAG,EAAEC,GAAG,KAAK;IACzC,MAAM;MAAEC;IAAM,CAAC,GAAGJ,OAAO;IACzB,IAAI,CAACI,KAAK,EAAE;IAEZ,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE3B,GAAG;QAAEC,GAAG;QAAEC,KAAK;QAAE0B,KAAK,EAAEzB;MAAa,CAAC;IAC/D,CAAC,CAAC;IAEF,IAAIS,QAAQ,CAACE,EAAE,EAAE;MACf,MAAMe,WAAW,GAAG,MAAMjB,QAAQ,CAACI,IAAI,CAAC,CAAC;MACzCnB,QAAQ,CAAEiC,SAAS,IAAK;QACtB,MAAMC,YAAY,GAAGD,SAAS,CAACE,GAAG,CAAEC,IAAI,IAAK;UAC3C,IAAIA,IAAI,CAACjC,GAAG,KAAK6B,WAAW,CAAC7B,GAAG,IAAIiC,IAAI,CAAChC,GAAG,KAAK4B,WAAW,CAAC5B,GAAG,EAAE;YAChE,OAAO4B,WAAW;UACpB;UACA,OAAOI,IAAI;QACb,CAAC,CAAC;QAEF,IAAI,CAACH,SAAS,CAACI,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACjC,GAAG,KAAK6B,WAAW,CAAC7B,GAAG,IAAIiC,IAAI,CAAChC,GAAG,KAAK4B,WAAW,CAAC5B,GAAG,CAAC,EAAE;UAC3F8B,YAAY,CAACI,IAAI,CAACN,WAAW,CAAC;QAChC;QAEA,OAAOE,YAAY;MACrB,CAAC,CAAC;MAEFK,YAAY,CAACP,WAAW,CAAC;MACzB9B,UAAU,CAAC;QAAEC,GAAG,EAAE,IAAI;QAAEC,GAAG,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;IACjD,CAAC,MAAM;MACLe,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAMkB,YAAY,GAAIP,WAAW,IAAK;IACpC,MAAMQ,UAAU,GAAG,CAAC,GAAGhC,OAAO,CAACiC,KAAK,CAAC,CAAC,EAAE/B,mBAAmB,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGX,KAAK,CAAC,CAAC;IAC7EU,UAAU,CAAC+B,UAAU,CAAC;IACtB7B,sBAAsB,CAAC6B,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC;EAC/C,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIjC,mBAAmB,GAAG,CAAC,EAAE;MAC3B,MAAMkC,aAAa,GAAGpC,OAAO,CAACE,mBAAmB,GAAG,CAAC,CAAC;MACtDV,QAAQ,CAAC4C,aAAa,CAAC;MACvBjC,sBAAsB,CAACD,mBAAmB,GAAG,CAAC,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMmC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAInC,mBAAmB,GAAGF,OAAO,CAACkC,MAAM,GAAG,CAAC,EAAE;MAC5C,MAAMI,SAAS,GAAGtC,OAAO,CAACE,mBAAmB,GAAG,CAAC,CAAC;MAClDV,QAAQ,CAAC8C,SAAS,CAAC;MACnBnC,sBAAsB,CAACD,mBAAmB,GAAG,CAAC,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMqC,iBAAiB,GAAIC,UAAU,IAAK;IACxCzC,eAAe,CAACyC,UAAU,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,IAAI,GAAG,EAAE;IACf,KAAK,IAAI/C,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAIS,SAAS,EAAET,GAAG,EAAE,EAAE;MACzC,MAAMgD,UAAU,GAAG,EAAE;MACrB,KAAK,IAAI/C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGS,SAAS,EAAET,GAAG,EAAE,EAAE;QACxC,MAAMgD,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGlD,GAAG,CAAC,CAAC,CAAC;QACjD,MAAMgC,IAAI,GAAGrC,KAAK,CAACsC,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACjC,GAAG,KAAKA,GAAG,IAAIiC,IAAI,CAAChC,GAAG,KAAKgD,SAAS,CAAC;QAC7ED,UAAU,CAACb,IAAI,cACb1C,OAAA;UAEE2D,OAAO,EAAEA,CAAA,KAAMrD,UAAU,CAAC;YAAEC,GAAG;YAAEC,GAAG,EAAEgD,SAAS;YAAE/C,KAAK,EAAE+B,IAAI,GAAGA,IAAI,CAAC/B,KAAK,GAAG;UAAG,CAAC,CAAE;UAClFmD,SAAS,EAAC,MAAM;UAChBC,KAAK,EAAE;YACLC,MAAM,EAAE,gBAAgB;YACxBC,SAAS,EAAE,QAAQ;YACnBC,eAAe,EAAE,CAACzD,GAAG,GAAGC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,SAAS,GAAG;UACvD,CAAE;UAAAyD,QAAA,EAED5D,OAAO,CAACE,GAAG,KAAKA,GAAG,IAAIF,OAAO,CAACG,GAAG,KAAKgD,SAAS,gBAC/CxD,OAAA;YACEkE,IAAI,EAAC,MAAM;YACXzD,KAAK,EAAEJ,OAAO,CAACI,KAAM;YACrB0D,QAAQ,EAAGxC,CAAC,IAAKD,gBAAgB,CAACC,CAAC,EAAEpB,GAAG,EAAEiD,SAAS,CAAE;YACrDY,MAAM,EAAEA,CAAA,KAAMvC,cAAc,CAACtB,GAAG,EAAEiD,SAAS,CAAE;YAC7Ca,SAAS;YACTT,SAAS,EAAC;UAAY;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC,gBAEFzE,OAAA;YAAAiE,QAAA,EAAOzB,IAAI,GAAGA,IAAI,CAAC/B,KAAK,GAAG;UAAE;YAAA6D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QACrC,GApBI,GAAGlE,GAAG,IAAIC,GAAG,EAAE;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAqBlB,CACN,CAAC;MACH;MACAnB,IAAI,CAACZ,IAAI,cAAC1C,OAAA;QAAAiE,QAAA,EAAeV;MAAU,GAAhBhD,GAAG;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CAAC,CAAC;IAC5C;IACA,OAAOnB,IAAI;EACb,CAAC;EAED,oBACEtD,OAAA;IAAK4D,SAAS,EAAC,uBAAuB;IAAAK,QAAA,gBACpCjE,OAAA;MAAAiE,QAAA,EAAI;IAAuB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGhCzE,OAAA;MAAK4D,SAAS,EAAC,qBAAqB;MAAAK,QAAA,gBAClCjE,OAAA;QAAQ2D,OAAO,EAAEZ,UAAW;QAAC2B,QAAQ,EAAE5D,mBAAmB,KAAK,CAAE;QAAAmD,QAAA,EAAC;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/EzE,OAAA;QAAQ2D,OAAO,EAAEV,UAAW;QAACyB,QAAQ,EAAE5D,mBAAmB,KAAKF,OAAO,CAACkC,MAAM,GAAG,CAAE;QAAAmB,QAAA,EAAC;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7F,CAAC,eAGNzE,OAAA;MAAK4D,SAAS,EAAC,kBAAkB;MAAAK,QAAA,gBAC/BjE,OAAA;QAAQ2D,OAAO,EAAEA,CAAA,KAAMR,iBAAiB,CAAC,CAAC,CAAE;QAACS,SAAS,EAAElD,YAAY,KAAK,CAAC,GAAG,QAAQ,GAAG,EAAG;QAAAuD,QAAA,EAAC;MAAO;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5GzE,OAAA;QAAQ2D,OAAO,EAAEA,CAAA,KAAMR,iBAAiB,CAAC,CAAC,CAAE;QAACS,SAAS,EAAElD,YAAY,KAAK,CAAC,GAAG,QAAQ,GAAG,EAAG;QAAAuD,QAAA,EAAC;MAAO;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5GzE,OAAA;QAAQ2D,OAAO,EAAEA,CAAA,KAAMR,iBAAiB,CAAC,CAAC,CAAE;QAACS,SAAS,EAAElD,YAAY,KAAK,CAAC,GAAG,QAAQ,GAAG,EAAG;QAAAuD,QAAA,EAAC;MAAO;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzG,CAAC,eAGNzE,OAAA;MAAO4D,SAAS,EAAC,aAAa;MAAAK,QAAA,gBAC5BjE,OAAA;QAAAiE,QAAA,eACEjE,OAAA;UAAAiE,QAAA,gBACEjE,OAAA;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACR,CAAC,GAAGE,KAAK,CAAC1D,SAAS,CAAC,CAAC,CAACsB,GAAG,CAAC,CAACqC,CAAC,EAAEC,QAAQ,kBACrC7E,OAAA;YAAAiE,QAAA,EAAoBR,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGmB,QAAQ;UAAC,GAA7CA,QAAQ;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA0C,CAC5D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRzE,OAAA;QAAAiE,QAAA,EAAQZ,UAAU,CAAC;MAAC;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACvE,EAAA,CAtKID,GAAG;AAAA6E,EAAA,GAAH7E,GAAG;AAwKT,eAAeA,GAAG;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}