{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUNYLoaner\\\\Desktop\\\\interactive-spreadsheet-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// --- Frontend: ReactJS ---\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cells, setCells] = useState([]);\n  const [editing, setEditing] = useState(null);\n  const [value, setValue] = useState('');\n\n  // Fetch cells from the backend API on component mount\n  useEffect(() => {\n    axios.get('http://localhost:5000/cells').then(res => setCells(res.data)).catch(err => console.error('Error fetching cells:', err));\n  }, []);\n\n  // Handle saving a cell value (new or updated)\n  const handleSave = async (row, col) => {\n    const existingCell = cells.find(cell => cell.row === row && cell.col === col);\n    if (existingCell) {\n      // Update existing cell\n      await axios.put(`http://localhost:5000/cells/${existingCell._id}`, {\n        value\n      });\n    } else {\n      // Create new cell\n      const res = await axios.post('http://localhost:5000/cells', {\n        row,\n        col,\n        value\n      });\n      setCells([...cells, res.data]);\n    }\n    setEditing(null);\n    setValue('');\n  };\n\n  // Handle when a cell is clicked for editing\n  const handleCellClick = (row, col) => {\n    const existingCell = cells.find(cell => cell.row === row && cell.col === col);\n    setEditing(`${row}-${col}`);\n    setValue(existingCell ? existingCell.value : '');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Spreadsheet Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [...Array(10)].map((_, row) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [...Array(10)].map((_, col) => {\n            const cell = cells.find(c => c.row === row && c.col === col);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              onClick: () => handleCellClick(row, col),\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                cursor: 'pointer'\n              },\n              children: editing === `${row}-${col}` ? /*#__PURE__*/_jsxDEV(\"input\", {\n                value: value,\n                onChange: e => setValue(e.target.value),\n                onBlur: () => handleSave(row, col),\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 23\n              }, this) : cell ? cell.value : ''\n            }, col, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this);\n          })\n        }, row, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6NwlAV7zVDopBCHCQYkDBNv3pCk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","cells","setCells","editing","setEditing","value","setValue","get","then","res","data","catch","err","console","error","handleSave","row","col","existingCell","find","cell","put","_id","post","handleCellClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","c","onClick","style","border","padding","cursor","onChange","e","target","onBlur","autoFocus","_c","$RefreshReg$"],"sources":["C:/Users/SUNYLoaner/Desktop/interactive-spreadsheet-app/frontend/src/App.js"],"sourcesContent":["// --- Frontend: ReactJS ---\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [cells, setCells] = useState([]);\r\n  const [editing, setEditing] = useState(null);\r\n  const [value, setValue] = useState('');\r\n\r\n  // Fetch cells from the backend API on component mount\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/cells')\r\n      .then((res) => setCells(res.data))\r\n      .catch((err) => console.error('Error fetching cells:', err));\r\n  }, []);\r\n\r\n  // Handle saving a cell value (new or updated)\r\n  const handleSave = async (row, col) => {\r\n    const existingCell = cells.find((cell) => cell.row === row && cell.col === col);\r\n    if (existingCell) {\r\n      // Update existing cell\r\n      await axios.put(`http://localhost:5000/cells/${existingCell._id}`, { value });\r\n    } else {\r\n      // Create new cell\r\n      const res = await axios.post('http://localhost:5000/cells', { row, col, value });\r\n      setCells([...cells, res.data]);\r\n    }\r\n    setEditing(null);\r\n    setValue('');\r\n  };\r\n\r\n  // Handle when a cell is clicked for editing\r\n  const handleCellClick = (row, col) => {\r\n    const existingCell = cells.find((cell) => cell.row === row && cell.col === col);\r\n    setEditing(`${row}-${col}`);\r\n    setValue(existingCell ? existingCell.value : '');\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Interactive Spreadsheet Application</h1>\r\n      <table>\r\n        <tbody>\r\n          {[...Array(10)].map((_, row) => (\r\n            <tr key={row}>\r\n              {[...Array(10)].map((_, col) => {\r\n                const cell = cells.find((c) => c.row === row && c.col === col);\r\n                return (\r\n                  <td\r\n                    key={col}\r\n                    onClick={() => handleCellClick(row, col)}\r\n                    style={{ border: '1px solid black', padding: '8px', cursor: 'pointer' }}\r\n                  >\r\n                    {editing === `${row}-${col}` ? (\r\n                      <input\r\n                        value={value}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                        onBlur={() => handleSave(row, col)}\r\n                        autoFocus\r\n                      />\r\n                    ) : (\r\n                      cell ? cell.value : ''\r\n                    )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}