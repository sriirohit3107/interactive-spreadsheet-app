{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUNYLoaner\\\\Desktop\\\\interactive-spreadsheet-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cells, setCells] = useState([]);\n  const [editing, setEditing] = useState({\n    row: null,\n    col: null,\n    value: ''\n  });\n\n  // Fetch all cells on page load\n  useEffect(() => {\n    const fetchCells = async () => {\n      const response = await fetch('http://localhost:5000/cells');\n      if (response.ok) {\n        const data = await response.json();\n        setCells(data);\n      } else {\n        console.error('Failed to fetch cells');\n      }\n    };\n    fetchCells();\n  }, []);\n\n  // Handle cell value change\n  const handleCellChange = (e, row, col) => {\n    setEditing({\n      row,\n      col,\n      value: e.target.value\n    });\n  };\n\n  // Handle save/update cell value\n  const handleCellSave = async (row, col) => {\n    const {\n      value\n    } = editing;\n    if (!value) return;\n    const response = await fetch('http://localhost:5000/cells', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        row,\n        col,\n        value\n      })\n    });\n    if (response.ok) {\n      const updatedCell = await response.json();\n      setCells(prevCells => {\n        return prevCells.map(cell => {\n          if (cell.row === updatedCell.row && cell.col === updatedCell.col) {\n            return updatedCell;\n          }\n          return cell;\n        });\n      });\n      setEditing({\n        row: null,\n        col: null,\n        value: ''\n      });\n    } else {\n      console.error('Failed to save cell');\n    }\n  };\n\n  // Render the spreadsheet grid\n  const renderGrid = () => {\n    const gridSize = 10; // 10x10 grid\n    const grid = [];\n    for (let row = 0; row < gridSize; row++) {\n      const cellsInRow = [];\n      for (let col = 0; col < gridSize; col++) {\n        const cell = cells.find(cell => cell.row === row && cell.col === col);\n        cellsInRow.push(/*#__PURE__*/_jsxDEV(\"td\", {\n          onClick: () => setEditing({\n            row,\n            col,\n            value: cell ? cell.value : ''\n          }),\n          style: {\n            border: '1px solid black',\n            padding: '10px',\n            width: '80px',\n            textAlign: 'center'\n          },\n          children: editing.row === row && editing.col === col ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editing.value,\n            onChange: e => handleCellChange(e, row, col),\n            onBlur: () => handleCellSave(row, col),\n            autoFocus: true,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: cell ? cell.value : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this));\n      }\n      grid.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: cellsInRow\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this));\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Spreadsheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      style: {\n        borderCollapse: 'collapse',\n        margin: '0 auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"whUhjeUB14FekD0zsNi4qOBpcdg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","cells","setCells","editing","setEditing","row","col","value","fetchCells","response","fetch","ok","data","json","console","error","handleCellChange","e","target","handleCellSave","method","headers","body","JSON","stringify","updatedCell","prevCells","map","cell","renderGrid","gridSize","grid","cellsInRow","find","push","onClick","style","border","padding","width","textAlign","children","type","onChange","onBlur","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","borderCollapse","margin","_c","$RefreshReg$"],"sources":["C:/Users/SUNYLoaner/Desktop/interactive-spreadsheet-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst App = () => {\r\n  const [cells, setCells] = useState([]);\r\n  const [editing, setEditing] = useState({ row: null, col: null, value: '' });\r\n\r\n  // Fetch all cells on page load\r\n  useEffect(() => {\r\n    const fetchCells = async () => {\r\n      const response = await fetch('http://localhost:5000/cells');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setCells(data);\r\n      } else {\r\n        console.error('Failed to fetch cells');\r\n      }\r\n    };\r\n    fetchCells();\r\n  }, []);\r\n\r\n  // Handle cell value change\r\n  const handleCellChange = (e, row, col) => {\r\n    setEditing({ row, col, value: e.target.value });\r\n  };\r\n\r\n  // Handle save/update cell value\r\n  const handleCellSave = async (row, col) => {\r\n    const { value } = editing;\r\n    if (!value) return;\r\n\r\n    const response = await fetch('http://localhost:5000/cells', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ row, col, value }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const updatedCell = await response.json();\r\n      setCells((prevCells) => {\r\n        return prevCells.map((cell) => {\r\n          if (cell.row === updatedCell.row && cell.col === updatedCell.col) {\r\n            return updatedCell;\r\n          }\r\n          return cell;\r\n        });\r\n      });\r\n      setEditing({ row: null, col: null, value: '' });\r\n    } else {\r\n      console.error('Failed to save cell');\r\n    }\r\n  };\r\n\r\n  // Render the spreadsheet grid\r\n  const renderGrid = () => {\r\n    const gridSize = 10; // 10x10 grid\r\n    const grid = [];\r\n    for (let row = 0; row < gridSize; row++) {\r\n      const cellsInRow = [];\r\n      for (let col = 0; col < gridSize; col++) {\r\n        const cell = cells.find((cell) => cell.row === row && cell.col === col);\r\n        cellsInRow.push(\r\n          <td\r\n            key={`${row}-${col}`}\r\n            onClick={() => setEditing({ row, col, value: cell ? cell.value : '' })}\r\n            style={{\r\n              border: '1px solid black',\r\n              padding: '10px',\r\n              width: '80px',\r\n              textAlign: 'center',\r\n            }}\r\n          >\r\n            {editing.row === row && editing.col === col ? (\r\n              <input\r\n                type=\"text\"\r\n                value={editing.value}\r\n                onChange={(e) => handleCellChange(e, row, col)}\r\n                onBlur={() => handleCellSave(row, col)}\r\n                autoFocus\r\n                style={{ width: '100%' }}\r\n              />\r\n            ) : (\r\n              <span>{cell ? cell.value : ''}</span>\r\n            )}\r\n          </td>\r\n        );\r\n      }\r\n      grid.push(<tr key={row}>{cellsInRow}</tr>);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h1>Interactive Spreadsheet</h1>\r\n      <table\r\n        style={{\r\n          borderCollapse: 'collapse',\r\n          margin: '0 auto',\r\n        }}\r\n      >\r\n        <tbody>{renderGrid()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}