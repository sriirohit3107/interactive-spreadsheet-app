{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUNYLoaner\\\\Desktop\\\\interactive-spreadsheet-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Import the external CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cells, setCells] = useState([]);\n  const [editing, setEditing] = useState({\n    row: null,\n    col: null,\n    value: ''\n  });\n  const [gridSize, setGridSize] = useState({\n    rows: 20,\n    cols: 20\n  }); // Default size (20x20)\n  const [history, setHistory] = useState([]); // History for undo/redo\n  const [currentHistoryIndex, setCurrentHistoryIndex] = useState(-1); // Track history position\n\n  // Fetch all cells on page load\n  useEffect(() => {\n    const fetchCells = async () => {\n      const response = await fetch('http://localhost:5000/cells');\n      if (response.ok) {\n        const data = await response.json();\n        setCells(data);\n      } else {\n        console.error('Failed to fetch cells');\n      }\n    };\n    fetchCells();\n  }, []);\n\n  // Handle cell value change\n  const handleCellChange = (e, row, col) => {\n    setEditing({\n      row,\n      col,\n      value: e.target.value\n    });\n  };\n\n  // Handle save/update cell value\n  const handleCellSave = async (row, col) => {\n    const {\n      value\n    } = editing;\n    if (!value) return;\n    const response = await fetch('http://localhost:5000/cells', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        row,\n        col,\n        value\n      })\n    });\n    if (response.ok) {\n      const updatedCell = await response.json();\n      setCells(prevCells => {\n        const updatedCells = prevCells.map(cell => {\n          if (cell.row === updatedCell.row && cell.col === updatedCell.col) {\n            return updatedCell; // Update the modified cell\n          }\n          return cell;\n        });\n\n        // If the cell wasn't found in the current state, add it\n        if (!prevCells.find(cell => cell.row === updatedCell.row && cell.col === updatedCell.col)) {\n          updatedCells.push(updatedCell);\n        }\n\n        // Return the updated cells array\n        return updatedCells;\n      });\n\n      // Add the change to history for undo/redo functionality\n      addToHistory(updatedCell);\n      setEditing({\n        row: null,\n        col: null,\n        value: ''\n      });\n    } else {\n      console.error('Failed to save cell');\n    }\n  };\n\n  // Add the current state of cells to history (for undo/redo)\n  const addToHistory = updatedCell => {\n    const newHistory = [...history.slice(0, currentHistoryIndex + 1), [...cells]];\n    setHistory(newHistory);\n    setCurrentHistoryIndex(newHistory.length - 1);\n  };\n\n  // Undo the last change\n  const handleUndo = () => {\n    if (currentHistoryIndex > 0) {\n      const previousCells = history[currentHistoryIndex - 1];\n      setCells(previousCells);\n      setCurrentHistoryIndex(currentHistoryIndex - 1);\n    }\n  };\n\n  // Redo the last undone change\n  const handleRedo = () => {\n    if (currentHistoryIndex < history.length - 1) {\n      const nextCells = history[currentHistoryIndex + 1];\n      setCells(nextCells);\n      setCurrentHistoryIndex(currentHistoryIndex + 1);\n    }\n  };\n\n  // Handle grid resizing (add or remove rows/columns)\n  const handleResizeGrid = (direction, type) => {\n    if (type === 'row') {\n      setGridSize(prev => {\n        const newRows = direction === 'add' ? prev.rows + 1 : Math.max(1, prev.rows - 1);\n        return {\n          ...prev,\n          rows: newRows\n        };\n      });\n    } else if (type === 'col') {\n      setGridSize(prev => {\n        const newCols = direction === 'add' ? prev.cols + 1 : Math.max(1, prev.cols - 1);\n        return {\n          ...prev,\n          cols: newCols\n        };\n      });\n    }\n  };\n\n  // Sorting functionality (sort by column)\n  const handleSort = colIndex => {\n    const sortedCells = [...cells];\n    sortedCells.sort((a, b) => {\n      if (a.col === colIndex && b.col === colIndex) {\n        return a.value > b.value ? 1 : -1;\n      }\n      return 0;\n    });\n    setCells(sortedCells);\n  };\n\n  // Render the spreadsheet grid\n  const renderGrid = () => {\n    const grid = [];\n    for (let row = 0; row < gridSize.rows; row++) {\n      const cellsInRow = [];\n      for (let col = 0; col < gridSize.cols; col++) {\n        const cell = cells.find(cell => cell.row === row && cell.col === col);\n        cellsInRow.push(/*#__PURE__*/_jsxDEV(\"td\", {\n          onClick: () => setEditing({\n            row,\n            col,\n            value: cell ? cell.value : ''\n          }),\n          className: \"cell\",\n          style: {\n            border: '1px solid #ccc',\n            textAlign: 'center',\n            backgroundColor: (row + col) % 2 === 0 ? '#f4f4f4' : '#fff' // Alternating row colors\n          },\n          children: editing.row === row && editing.col === col ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editing.value,\n            onChange: e => handleCellChange(e, row, col),\n            onBlur: () => handleCellSave(row, col),\n            autoFocus: true,\n            className: \"cell-input\",\n            style: {\n              width: '100%',\n              height: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: cell ? cell.value : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this));\n      }\n      grid.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: cellsInRow\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this));\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spreadsheet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Spreadsheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUndo,\n      disabled: currentHistoryIndex === 0,\n      children: \"Undo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRedo,\n      disabled: currentHistoryIndex === history.length - 1,\n      children: \"Redo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleResizeGrid('add', 'row'),\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleResizeGrid('remove', 'row'),\n        children: \"Remove Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleResizeGrid('add', 'col'),\n        children: \"Add Column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleResizeGrid('remove', 'col'),\n        children: \"Remove Column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"spreadsheet\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), [...Array(gridSize.cols)].map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(colIndex),\n            children: String.fromCharCode(65 + colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Yiz3GWY6MBwvtpR0XjFqm8NfIIU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","cells","setCells","editing","setEditing","row","col","value","gridSize","setGridSize","rows","cols","history","setHistory","currentHistoryIndex","setCurrentHistoryIndex","fetchCells","response","fetch","ok","data","json","console","error","handleCellChange","e","target","handleCellSave","method","headers","body","JSON","stringify","updatedCell","prevCells","updatedCells","map","cell","find","push","addToHistory","newHistory","slice","length","handleUndo","previousCells","handleRedo","nextCells","handleResizeGrid","direction","type","prev","newRows","Math","max","newCols","handleSort","colIndex","sortedCells","sort","a","b","renderGrid","grid","cellsInRow","onClick","className","style","border","textAlign","backgroundColor","children","onChange","onBlur","autoFocus","width","height","fileName","_jsxFileName","lineNumber","columnNumber","disabled","Array","_","String","fromCharCode","_c","$RefreshReg$"],"sources":["C:/Users/SUNYLoaner/Desktop/interactive-spreadsheet-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css'; // Import the external CSS file\r\n\r\nconst App = () => {\r\n  const [cells, setCells] = useState([]);\r\n  const [editing, setEditing] = useState({ row: null, col: null, value: '' });\r\n  const [gridSize, setGridSize] = useState({ rows: 20, cols: 20 }); // Default size (20x20)\r\n  const [history, setHistory] = useState([]); // History for undo/redo\r\n  const [currentHistoryIndex, setCurrentHistoryIndex] = useState(-1); // Track history position\r\n\r\n  // Fetch all cells on page load\r\n  useEffect(() => {\r\n    const fetchCells = async () => {\r\n      const response = await fetch('http://localhost:5000/cells');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setCells(data);\r\n      } else {\r\n        console.error('Failed to fetch cells');\r\n      }\r\n    };\r\n    fetchCells();\r\n  }, []);\r\n\r\n  // Handle cell value change\r\n  const handleCellChange = (e, row, col) => {\r\n    setEditing({ row, col, value: e.target.value });\r\n  };\r\n\r\n  // Handle save/update cell value\r\n  const handleCellSave = async (row, col) => {\r\n    const { value } = editing;\r\n    if (!value) return;\r\n\r\n    const response = await fetch('http://localhost:5000/cells', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ row, col, value }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const updatedCell = await response.json();\r\n      setCells((prevCells) => {\r\n        const updatedCells = prevCells.map((cell) => {\r\n          if (cell.row === updatedCell.row && cell.col === updatedCell.col) {\r\n            return updatedCell; // Update the modified cell\r\n          }\r\n          return cell;\r\n        });\r\n\r\n        // If the cell wasn't found in the current state, add it\r\n        if (!prevCells.find((cell) => cell.row === updatedCell.row && cell.col === updatedCell.col)) {\r\n          updatedCells.push(updatedCell);\r\n        }\r\n\r\n        // Return the updated cells array\r\n        return updatedCells;\r\n      });\r\n\r\n      // Add the change to history for undo/redo functionality\r\n      addToHistory(updatedCell);\r\n      setEditing({ row: null, col: null, value: '' });\r\n    } else {\r\n      console.error('Failed to save cell');\r\n    }\r\n  };\r\n\r\n  // Add the current state of cells to history (for undo/redo)\r\n  const addToHistory = (updatedCell) => {\r\n    const newHistory = [...history.slice(0, currentHistoryIndex + 1), [...cells]];\r\n    setHistory(newHistory);\r\n    setCurrentHistoryIndex(newHistory.length - 1);\r\n  };\r\n\r\n  // Undo the last change\r\n  const handleUndo = () => {\r\n    if (currentHistoryIndex > 0) {\r\n      const previousCells = history[currentHistoryIndex - 1];\r\n      setCells(previousCells);\r\n      setCurrentHistoryIndex(currentHistoryIndex - 1);\r\n    }\r\n  };\r\n\r\n  // Redo the last undone change\r\n  const handleRedo = () => {\r\n    if (currentHistoryIndex < history.length - 1) {\r\n      const nextCells = history[currentHistoryIndex + 1];\r\n      setCells(nextCells);\r\n      setCurrentHistoryIndex(currentHistoryIndex + 1);\r\n    }\r\n  };\r\n\r\n  // Handle grid resizing (add or remove rows/columns)\r\n  const handleResizeGrid = (direction, type) => {\r\n    if (type === 'row') {\r\n      setGridSize((prev) => {\r\n        const newRows = direction === 'add' ? prev.rows + 1 : Math.max(1, prev.rows - 1);\r\n        return { ...prev, rows: newRows };\r\n      });\r\n    } else if (type === 'col') {\r\n      setGridSize((prev) => {\r\n        const newCols = direction === 'add' ? prev.cols + 1 : Math.max(1, prev.cols - 1);\r\n        return { ...prev, cols: newCols };\r\n      });\r\n    }\r\n  };\r\n\r\n  // Sorting functionality (sort by column)\r\n  const handleSort = (colIndex) => {\r\n    const sortedCells = [...cells];\r\n    sortedCells.sort((a, b) => {\r\n      if (a.col === colIndex && b.col === colIndex) {\r\n        return a.value > b.value ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    setCells(sortedCells);\r\n  };\r\n\r\n  // Render the spreadsheet grid\r\n  const renderGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < gridSize.rows; row++) {\r\n      const cellsInRow = [];\r\n      for (let col = 0; col < gridSize.cols; col++) {\r\n        const cell = cells.find((cell) => cell.row === row && cell.col === col);\r\n        cellsInRow.push(\r\n          <td\r\n            key={`${row}-${col}`}\r\n            onClick={() => setEditing({ row, col, value: cell ? cell.value : '' })}\r\n            className=\"cell\"\r\n            style={{\r\n              border: '1px solid #ccc',\r\n              textAlign: 'center',\r\n              backgroundColor: (row + col) % 2 === 0 ? '#f4f4f4' : '#fff', // Alternating row colors\r\n            }}\r\n          >\r\n            {editing.row === row && editing.col === col ? (\r\n              <input\r\n                type=\"text\"\r\n                value={editing.value}\r\n                onChange={(e) => handleCellChange(e, row, col)}\r\n                onBlur={() => handleCellSave(row, col)}\r\n                autoFocus\r\n                className=\"cell-input\"\r\n                style={{ width: '100%', height: '100%' }}\r\n              />\r\n            ) : (\r\n              <span>{cell ? cell.value : ''}</span>\r\n            )}\r\n          </td>\r\n        );\r\n      }\r\n      grid.push(<tr key={row}>{cellsInRow}</tr>);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  return (\r\n    <div className=\"spreadsheet-container\">\r\n      <h1>Interactive Spreadsheet</h1>\r\n      \r\n      {/* Buttons for Undo and Redo */}\r\n      <button onClick={handleUndo} disabled={currentHistoryIndex === 0}>Undo</button>\r\n      <button onClick={handleRedo} disabled={currentHistoryIndex === history.length - 1}>Redo</button>\r\n\r\n      {/* Resize Grid Buttons */}\r\n      <div>\r\n        <button onClick={() => handleResizeGrid('add', 'row')}>Add Row</button>\r\n        <button onClick={() => handleResizeGrid('remove', 'row')}>Remove Row</button>\r\n        <button onClick={() => handleResizeGrid('add', 'col')}>Add Column</button>\r\n        <button onClick={() => handleResizeGrid('remove', 'col')}>Remove Column</button>\r\n      </div>\r\n\r\n      {/* Table with Sorting */}\r\n      <table className=\"spreadsheet\">\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            {[...Array(gridSize.cols)].map((_, colIndex) => (\r\n              <th key={colIndex} onClick={() => handleSort(colIndex)}>\r\n                {String.fromCharCode(65 + colIndex)}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{renderGrid()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}